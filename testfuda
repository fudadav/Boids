#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include "doctest.h"
#include "boid.h"
#include <cmath> // Per la funzione std::sqrt

// Helper function to create a normalized vec3
vec3 normalized_vec3(double x, double y, double z) {
    vec3 v(x, y, z);
    return v.normalize();
}

// Test costruttori
TEST_CASE("Test costruttore di default") {
    boid b;

    CHECK(b.get_position() == vec3(0, 0, 0));
    CHECK(b.get_velocity() == vec3(0, 0, 0));
}

TEST_CASE("Test costruttore con parametri") {
    vec3 pos(1, 2, 3);
    vec3 vel(0.5, 0.5, 0.5);
    boid b(pos, vel);

    CHECK(b.get_position() == pos);
    CHECK(b.get_velocity() == vel);
}

// Test dei metodi getter e setter
TEST_CASE("Test set_position e get_position") {
    boid b;
    vec3 new_pos(5, 5, 5);
    b.set_position(new_pos);

    CHECK(b.get_position() == new_pos);
}

TEST_CASE("Test set_velocity e get_velocity") {
    boid b;
    vec3 new_vel(1, 2, 3);
    b.set_velocity(new_vel);

    CHECK(b.get_velocity() == new_vel);
}

// Test del metodo update_boid_velocity
TEST_CASE("Test update_boid_velocity con velocità inferiore al massimo") {
    boid b;
    vec3 delta_v(1, 1, 1);
    double max_speed = 10.0;

    b.update_boid_velocity(delta_v, max_speed);

    CHECK(b.get_velocity() == delta_v);
}

TEST_CASE("Test update_boid_velocity con velocità superiore al massimo") {
    boid b(vec3(0, 0, 0), vec3(4, 4, 4));
    vec3 delta_v(4, 4, 4);
    double max_speed = 5.0;

    b.update_boid_velocity(delta_v, max_speed);

    // La velocità è limitata al massimo
    CHECK(b.get_velocity().norm() == doctest::Approx(max_speed).epsilon(0.01));
}

// Test del metodo update_boid
TEST_CASE("Test update_boid con velocità inferiore al massimo") {
    boid b;
    vec3 delta_v(1, 1, 1);
    double max_speed = 10.0;

    b.update_boid(delta_v, max_speed);

    CHECK(b.get_velocity() == delta_v);
    CHECK(b.get_position() == delta_v * 3);
}

TEST_CASE("Test update_boid con velocità superiore al massimo") {
    boid b(vec3(0, 0, 0), vec3(4, 4, 4));
    vec3 delta_v(4, 4, 4);
    double max_speed = 5.0;

    b.update_boid(delta_v, max_speed);

    // La velocità è limitata al massimo
    CHECK(b.get_velocity().norm() == doctest::Approx(max_speed).epsilon(0.01));
    CHECK(b.get_position().norm() == doctest::Approx(max_speed * 3).epsilon(0.01));
}

// Test dell'operatore di uguaglianza e disuguaglianza
TEST_CASE("Test operator==") {
    boid b1(vec3(1, 2, 3), vec3(0.5, 0.5, 0.5));
    boid b2(vec3(1, 2, 3), vec3(0.5, 0.5, 0.5));

    CHECK(b1 == b2);
}

TEST_CASE("Test operator!=") {
    boid b1(vec3(1, 2, 3), vec3(0.5, 0.5, 0.5));
    boid b2(vec3(4, 5, 6), vec3(0.5, 0.5, 0.5));

    CHECK(b1 != b2);
}

// Test dell'operatore di assegnazione
TEST_CASE("Test operator=") {
    boid b1(vec3(1, 2, 3), vec3(0.5, 0.5, 0.5));
    boid b2;

    b2 = b1;

    CHECK(b2 == b1);
}
